temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
View(all.field.peaks)
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
i =1
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
View(temp.dat)
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 4,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max.resp","Mid.peaks")
temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max.resp[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
summary(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 4,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks")
temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
summary(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
AIC(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
rm(peak.segments)
all.field$DOCRich = as.numeric(all.field$Total_number_of_peaks) *
as.numeric(all.field$X00681_NPOC_mg_per_L_as_C)
all.incubation$DOCRich = as.numeric(all.incubation$Total_number_of_peaks) *
as.numeric(all.incubation$X00681_NPOC_mg_per_L_as_C)
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
summary(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
View(peak.segments)
i
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
temp.low = min(all.field.peaks$RichoverDOC)
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
View(temp.dat)
i
i = 1
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
View(all.field.peaks)
temp.low = min(all.field.peaks$RichoverDOC)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
i
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
all.field.peaks$RichoverDOC
[which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
which(all.field.peaks$X00681_NPOC_mg_per_L_as_C >= temp.low & all.field.peaks$RichoverDOC <= temp.high)
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
View(peak.segments.incubation)
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
summary(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
AIC(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
rm(peak.segments)
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
summary(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
AIC = AIC(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
AIC
rm(peak.segments)
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
summary(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
AIC = AIC(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
print("AIC")
AIC
rm(peak.segments)
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
summary(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
AIC = AIC(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
print(AIC)
AIC
rm(peak.segments)
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
View(peak.segments)
rm(list=ls());graphics.off();
# Set working directory
home.dir = "C:/Users/gara009/OneDrive - PNNL/Documents/GitHub/RC2_Temp/ws_bgc_2021/"
rm(list=ls());graphics.off();
# Load libraries
# Setting directories
home.dir = "C:/Users/gara009/OneDrive - PNNL/Documents/GitHub/RC2_Temp/ws_bgc_2021/"
data.dir = paste0(home.dir,"Data")
output.dir = paste0(home.dir,"Output")
setwd(data.dir) # Set working directory
# Load data
data = read.csv("Figure_1.csv")
getwd()
data.dir = paste0(home.dir,"Data/")
output.dir = paste0(home.dir,"Output/")
setwd(data.dir) # Set working directory
# Setting directories
home.dir = "C:/Users/gara009/OneDrive - PNNL/Documents/GitHub/ws_bgc_2021/"
data.dir = paste0(home.dir,"Data/")
output.dir = paste0(home.dir,"Output/")
setwd(data.dir) # Set working directory
data = read.csv("Figure_1.csv")
View(data)
data = read.csv("Figure_1.csv", skip = 1)
View(data)
ggplot(date, aes(x = Year)) +
coord_cartesian() + geom_hist()
# Load libraries
library(ggplot2)
ggplot(date, aes(x = Year)) +
coord_cartesian() + geom_hist()
ggplot(data, aes(x = Year)) +
coord_cartesian() + geom_hist()
ggplot(data, aes(x = Year)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("log10_NPOC_CV"))+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank())
ggplot(data, aes(x = Year)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"))+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank())
ggplot(data, aes(x = Year)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank())
ggplot(data, aes(x = Year), color = Ecosystem_type) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank())
ggplot(data, aes(x = Year), fill = Ecosystem_type) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank())
ggplot(data, aes(x = Year, fill = Ecosystem_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank())
ggplot(data, aes(x = Year, color = Ecosystem_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank())
ggplot(data, aes(x = Year, color = Ecosystem_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) +  + scale_colour_manual(values = c("Black","blue","red","green"))
ggplot(data, aes(x = Year, color = Ecosystem_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_colour_manual(values = c("Black","blue","red","green"))
ggplot(data, aes(x = Year, color = Study_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_colour_manual(values = c("Black","blue","red","green"))
ggplot(data, aes(x = Year, color = factor(Study_type))) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_colour_manual(values = c("Black","blue","red","green"))
ggplot(data, aes(x = Year, color = factor(Study_type))) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50, color = "black", fill = "white")+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_colour_manual(values = c("blue","green"))
ggplot(data, aes(x = Year, color = factor(Study_type))) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50)+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_colour_manual(values = c("blue","green"))
ggplot(data, aes(x = Year, fill = factor(Study_type))) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50)+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_colour_manual(values = c("blue","green"))
ggplot(data, aes(x = Year, fill = factor(Study_type))) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50)+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_fill_manual(values = c("blue","green"))
ggplot(data, aes(x = Year, fill = Study_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50)+ labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_fill_manual(values = c("blue","green"))
ggplot(data, aes(x = Year, fill = Study_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50) +
geom_vline(aes(xintercept = "2007"), colour="black") +
labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_fill_manual(values = c("blue","green"))
ggplot(data, aes(x = Year, fill = Study_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50) +
geom_vline(aes(x = "2007"), colour="black") +
labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_fill_manual(values = c("blue","green"))
ggplot(data, aes(x = Year, fill = Study_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50) +
geom_vline(aes(xintercept = "2007"), colour="black") +
labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_fill_manual(values = c("blue","green"))
ggplot(data, aes(x = Year, fill = Study_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50) +
geom_vline(aes(xintercept = 2007), colour="black") +
labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_fill_manual(values = c("blue","green"))
paste0(output.dir,"Figure_1_",Sys.Date(),".pdf")
