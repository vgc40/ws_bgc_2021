temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
peak.segments$overNPOC = 1 / peak.segments$X00681_NPOC_mg_per_L_as_C
summary(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
AIC = AIC(lm(log(peak.segments$Max_rate_mg_per_L_per_h) ~
peak.segments$Total_number_of_peaks +
peak.segments$overNPOC +
peak.segments$RichoverDOC))
print(AIC)
AIC
rm(peak.segments)
# Field
# Defining the segments
ideal.num.segments = 10
all.field.peaks = all.field[order(all.field$RichoverDOC),]
field.step = (max(all.field.peaks$RichoverDOC)- min(all.field.peaks$RichoverDOC))/(ideal.num.segments)
peak.segments = as.data.frame(matrix(NA,ncol = 8,nrow = ideal.num.segments))
colnames(peak.segments)= c("Low.boundary","High.boundary","Max_rate_mg_per_L_per_h","Mid.peaks","Total_number_of_peaks","X00681_NPOC_mg_per_L_as_C", "RichoverDOC" ,"Sample_ID")
temp.low = min(all.field.peaks$RichoverDOC)
for (i in 1:ideal.num.segments){
temp.high = temp.low + field.step
temp.dat = all.field.peaks[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high),]
if (nrow(temp.dat) > 0){
temp.rate = max(all.field.peaks$rate_mg_per_L_per_h[which(all.field.peaks$RichoverDOC >= temp.low & all.field.peaks$RichoverDOC <= temp.high)])
temp.mid =  temp.dat$RichoverDOC[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = temp.dat$Total_number_of_peaks[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = temp.dat$X00681_NPOC_mg_per_L_as_C[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$Sample_ID[i] = temp.dat$Sample_ID[which(temp.dat$rate_mg_per_L_per_h %in% temp.rate)]
peak.segments$RichoverDOC[i] = peak.segments$Total_number_of_peaks[i]/peak.segments$X00681_NPOC_mg_per_L_as_C[i]
temp.low = temp.high
} else if (nrow(temp.dat) == 0){
temp.rate = NA
temp.mid =  NA
peak.segments$Low.boundary[i] = temp.low
peak.segments$High.boundary[i] = temp.high
peak.segments$Max_rate_mg_per_L_per_h[i] = temp.rate
peak.segments$Mid.peaks[i] = temp.mid
peak.segments$Total_number_of_peaks[i] = NA
peak.segments$X00681_NPOC_mg_per_L_as_C[i] = NA
peak.segments$Sample_ID[i] = NA
peak.segments$RichoverDOC[i] = NA
temp.low = temp.high
}
}
View(peak.segments)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=T))
library(dplyr)
library(unitted)
library(ggplot2)
library(tidyr)
library(devtools)
data.path = "C:/Users/gara009/OneDrive - PNNL/Documents/01_MFC Manuscript/Data"
setwd(data.path)
dat = read.csv("SM_WY_2020_2021.csv",header=T)
results = read.csv("/Output/Results_SM_WY_2020_20212021-11-16.csv")
results = read.csv(paste0(data.path,"/Output/Results_SM_WY_2020_20212021-11-16.csv"))
View(results)
library(dplyr)
library(unitted)
library(ggplot2)
library(tidyr)
library(devtools)
library("anytime")
library("plyr")
library("readr")
library(dygraphs)
library(xts)          # To make the conversion data-frame / xts format
#library(tidyverse)
library(lubridate)
library(htmlwidgets)
library(scales)   # to access breaks/formatting functions
library(gridExtra) # for arranging plots
library(plotly)
library(ggplot2)
library(reshape2)
library(bayesbio)
require(reshape2); require(ggplot2); require(easycsv)
library(TPD); library(ggplot2); library(reshape2);library(vegan)
library(TPD); library(ggplot2); library(reshape2);library(vegan)
library(ggthemes);library(ggpubr);library(dplyr)
library(stringr);library(e1071); library (ggpmisc)
data.path = "C:/Users/gara009/OneDrive - PNNL/Documents/01_MFC Manuscript/Data"
setwd(data.path)
dat = read.csv("SM_WY_2020_2021.csv",header=T)
# Change date time format
dat$DATE_TIME = as.POSIXct(dat$DATE_TIME, format = "%m/%d/%Y %H:%M", tz="Etc/GMT+8")
# Change discharge from L/s to m3
dat$Q_m3 = dat$Q_L_per_s*0.001
# Calculate in mg/L for much DO you would have in the water at the current saturation conditions
dat$DOsat_mg_per_L =(dat$DO_mg_per_L*100)/dat$Dosat_pct
# Reducing the number of decimals after performing the saturation calculations
dat$Dosat_mg_per_L = round(dat$DOsat_mg_per_L,2)
results = read.csv(paste0(data.path,"/Output/Results_SM_WY_2020_20212021-11-16.csv"))
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "DO_pct_sat"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = dat$DATE_TIME, y = dat$DO_mg_per_L, name = "DO_mg_per_L")
fig <- fig %>% add_lines(x = dat$DATE_TIME, y = dat$Dosat_pct, name = "DO_pct_sat", yaxis = "y2")
fig <- fig %>% layout(
title = "Dissolved Oxygen WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "DO_mg_per_L"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig
meanQday = aggregate(dat["Q_m3"],by = dat["DATE_TIME"],mean)
View(meanQday)
View(meanQday)
meanQday = aggregate(dat["Q_m3"],by = dat["DATE_TIME"],mean)
dat$solar.time = calc_solar_time(dat$DATE_TIME, longitude = -117.1)
library(streamMetabolizer)
dat$solar.time = calc_solar_time(dat$DATE_TIME, longitude = -117.1)
View(dat)
dat$solar.time = as.Date(dat$solar.time)
test = as.Date(dat$DATE_TIME)
View(test)
dat$DATE = as.Date(dat$DATE_TIME)
meanQday = aggregate(dat["Q_m3"],by = dat["DATE"],mean)
meanQday = aggregate(dat["Q_m3"],by = dat["solar.time"],mean)
dat$solar.time = calc_solar_time(dat$DATE_TIME, longitude = -117.1)
dat$solar.time = as.Date(dat$solar.time)
meanQday = aggregate(dat["Q_m3"],by = dat["solar.time"],mean)
View(meanQday)
dat2 = subset(dat, solar.time > "2021-01-01")
View(dat2)
meanQday2 = aggregate(dat2["Q_m3"],by = dat2["solar.time"],mean)
results2 = subset(results, date > "2021-01-01")
View(results)
View(meanQday2)
dat2 = subset(dat, solar.time > "2020-11-09")
meanQday2 = aggregate(dat2["Q_m3"],by = dat2["solar.time"],mean)
results2 = subset(results, date > "2020-11-09")
View(results)
results2 = subset(results, results$date > "2020-11-09")
names(meanQday2)[1] = "date"
View(meanQday2)
test = merge(meanQday2,results, by = date)
results$date = as.Date(results$date)
results2 = subset(results, results$date > "2020-11-09")
dat2 = subset(dat, solar.time > "2020-11-09")
meanQday2 = aggregate(dat2["Q_m3"],by = dat2["solar.time"],mean)
results$date = as.Date(results$date)
results2 = subset(results, results$date > "2020-11-09")
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "Discharge_m3"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig
dat2 = subset(dat, solar.time > "2020-11-09")
meanQday2 = aggregate(dat2["Q_m3"],by = dat2["solar.time"],mean)
results$date = as.Date(results$date)
results2 = subset(results, results$date > "2020-11-09")
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "Discharge_m3"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig <- fig %>% layout(shapes = list(vline(2.5)))
vline <- function(x = 0, color = "green") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color, dash="dot")
)
}
fig <- fig %>% layout(shapes = list(vline(2.5)))
fig
vline <- function(x = "2020-12-01", color = "green") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color, dash="dot")
)
}
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig <- fig %>% layout(shapes = list(vline(2.5)))
fig
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig <- fig %>%
add_trace(x =as.Date("2018-10-01"),type = 'scatter', mode = 'lines',
line = list(color = 'black'),name = '')
fig <- fig %>%
add_trace(x =as.Date("2020-11-09"),type = 'scatter', mode = 'lines',
line = list(color = 'black'),name = '')
fig
vline <- function(x = 0", color = "green") {
vline <- function(x = 0, color = "green") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color, dash="dot")
)
}
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig <- fig %>% layout(shapes = list(vline(as.Date("2020-12-01"))))
fig
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig <- fig %>% layout(shapes = list(vline(as.Date("2020-12-01"))))
fig <- fig %>% layout(shapes = list(vline(as.Date("2021-03-09"))))
fig <- fig %>% layout(shapes = list(vline(as.Date("2021-04-07"))))
fig <- fig %>% layout(shapes = list(vline(as.Date("2021-05-18"))))
fig <- fig %>% layout(shapes = list(vline(as.Date("2021-06-23"))))
fig
fig <- fig %>% layout(shapes = list(vline(as.Date("2021-03-09"))))
fig
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig <- fig %>% layout(shapes = list(vline(as.Date("2020-12-01","2021-03-09"))))
fig
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig <- fig %>% layout(shapes = list(vline(as.Date(c("2020-12-01","2021-03-09")))))
fig
v.years <- as.Date(c("2020-12-01","2021-03-09","2021-04-07","2021-05-18","2021-06-23"))
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
v.years <- as.Date(c("2020-12-01","2021-03-09","2021-04-07","2021-05-18","2021-06-23"))
for(i in 1:length(v.years))
{
fig <- fig %>%
add_trace(x = v.years[i], type = 'scatter', mode = 'lines',
line = list(color = "red", dash = "dash"))
}
fig
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
v.years <- as.Date(c("2020-12-01","2021-03-09","2021-04-07","2021-05-18","2021-06-23"))
for(i in 1:length(v.years))
{
fig <- fig %>% layout(shapes = list(v.years[i]))
}
fig
v.years[i]
fig <- fig %>% add_lines (x = "2020-12-01")
v.years <- as.Date(c("2020-12-01","2021-03-09","2021-04-07","2021-05-18","2021-06-23"))
for(i in 1:length(v.years))
{
fig <- fig %>%
add_trace(x = v.years[i], type = 'scatter', mode = 'lines',
line = list(color = "red", dash = "dash"))
}
fig
v.years <- as.Date(c("2020-12-01 14:00:00","2021-03-09","2021-04-07","2021-05-18","2021-06-23"))
for(i in 1:length(v.years))
{
fig <- fig %>%
add_trace(x = v.years[i], type = 'scatter', mode = 'lines',
line = list(color = "red", dash = "dash"))
}
fig
v.years <- as.Date(c("2020-12-01 14:00:00","2021-03-09","2021-04-07","2021-05-18","2021-06-23"))
for(i in 1:length(v.years))
{
fig <- fig %>%
add_trace(x = v.years[i], type = 'scatter', mode = 'lines',
line = list(color = "red", dash = "dash"))
}
fig
fig <- plot_ly()
fig <- fig %>% add_lines(x = results2$date, y = results2$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday2$solar.time, y = meanQday2$Q_m3, name = "Discharge_m3", yaxis = "y2")
fig <- fig %>% layout(
title = "GPP and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig <- fig %>% layout(shapes = list(vline(as.Date("2020-12-01"))))
fig
dat$solar.time = calc_solar_time(dat$DATE_TIME, longitude = -117.1)
dat$solar.time = as.Date(dat$solar.time)
meanQday = aggregate(dat["TEMP_degreesC"],by = dat["solar.time"],mean)
dat$solar.time = calc_solar_time(dat$DATE_TIME, longitude = -117.1)
dat$solar.time = as.Date(dat$solar.time)
meanQday = aggregate(dat["TEMP_degreesC"],by = dat["solar.time"],mean)
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "Temperature"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = results$date, y = results$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday$solar.time, y = meanQday$Q_m3, name = "TempCdegC", yaxis = "y2")
dat$solar.time = calc_solar_time(dat$DATE_TIME, longitude = -117.1)
dat$solar.time = as.Date(dat$solar.time)
meanQday = aggregate(dat["TEMP_degreesC"],by = dat["solar.time"],mean)
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "Temperature"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = results$date, y = results$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday$solar.time, y = meanQday$TEMP_degreesC, name = "TempCdegC", yaxis = "y2")
fig <- fig %>% layout(
title = "Temp and Discharge WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig
dat$solar.time = calc_solar_time(dat$DATE_TIME, longitude = -117.1)
dat$solar.time = as.Date(dat$solar.time)
meanQday = aggregate(dat["DO_Mg_per_L"],by = dat["solar.time"],mean)
meanQday = aggregate(dat["DO_mg_per_L"],by = dat["solar.time"],mean)
dat$solar.time = calc_solar_time(dat$DATE_TIME, longitude = -117.1)
dat$solar.time = as.Date(dat$solar.time)
meanQday = aggregate(dat["DO_mg_per_L"],by = dat["solar.time"],mean)
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "DO"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = results$date, y = results$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday$solar.time, y = meanQday$TEMP_degreesC, name = "DO", yaxis = "y2")
dat$solar.time = calc_solar_time(dat$DATE_TIME, longitude = -117.1)
dat$solar.time = as.Date(dat$solar.time)
meanQday = aggregate(dat["DO_mg_per_L"],by = dat["solar.time"],mean)
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = "DO"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = results$date, y = results$GPP_mean, name = "GPP_g_per_m2_per_d1")
fig <- fig %>% add_lines(x = meanQday$solar.time, y = meanQday$DO_mg_per_L, name = "DO", yaxis = "y2")
fig <- fig %>% layout(
title = "DO and GPP WY 2020-2021", yaxis2 = ay,
xaxis = list(title="Date_Time"), yaxis = list(title= "GPP_g_per_m2_per_d1"))
fig <- fig %>% layout(showlegend = TRUE
,margin = list(
pad = 5, r = 70)
,legend = list(orientation = "h", y = 1))
fig
rm(list=ls());graphics.off();
# Load libraries
library(ggplot2)
# Setting directories
home.dir = "C:/Users/gara009/OneDrive - PNNL/Documents/GitHub/ws_bgc_2021/"
data.dir = paste0(home.dir,"Data/")
output.dir = paste0(home.dir,"Output/")
setwd(data.dir) # Set working directory
# Load data
data = read.csv("Figure_1.csv", skip = 1)
# Make the plots
ggplot(data, aes(x = Year, fill = Study_type)) +
coord_cartesian() +  geom_histogram(alpha = 0.5, bins = 50) +
geom_vline(aes(xintercept = 2007), colour="black") +
labs(x = paste0("Year"), y = "Number of papers")+ theme_bw() + theme(text = element_text(size=12, color="black"),axis.text = element_text(color = "black"), axis.ticks = element_line(color = "black"),panel.background = element_blank(), panel.grid = element_blank()) + scale_fill_manual(values = c("blue","red"))
ggsave(paste0(output.dir,"Figure_1_",Sys.Date(),".pdf"))
